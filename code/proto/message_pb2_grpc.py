# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import message_pb2 as message__pb2


class DistributedWorkerStub(object):
    """A distributed worker that evaluates configurations
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.EvaluateConfig = channel.unary_unary(
                '/distributedtraining.DistributedWorker/EvaluateConfig',
                request_serializer=message__pb2.Config.SerializeToString,
                response_deserializer=message__pb2.Performanace.FromString,
                )
        self.CollectQueries = channel.unary_unary(
                '/distributedtraining.DistributedWorker/CollectQueries',
                request_serializer=message__pb2.Config.SerializeToString,
                response_deserializer=message__pb2.Empty.FromString,
                )
        self.EvaluateLoss = channel.unary_unary(
                '/distributedtraining.DistributedWorker/EvaluateLoss',
                request_serializer=message__pb2.LossConfig.SerializeToString,
                response_deserializer=message__pb2.Loss.FromString,
                )
        self.Ping = channel.unary_unary(
                '/distributedtraining.DistributedWorker/Ping',
                request_serializer=message__pb2.Empty.SerializeToString,
                response_deserializer=message__pb2.Empty.FromString,
                )


class DistributedWorkerServicer(object):
    """A distributed worker that evaluates configurations
    """

    def EvaluateConfig(self, request, context):
        """Provides a configuration to evaluate
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CollectQueries(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EvaluateLoss(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Ping(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DistributedWorkerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'EvaluateConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.EvaluateConfig,
                    request_deserializer=message__pb2.Config.FromString,
                    response_serializer=message__pb2.Performanace.SerializeToString,
            ),
            'CollectQueries': grpc.unary_unary_rpc_method_handler(
                    servicer.CollectQueries,
                    request_deserializer=message__pb2.Config.FromString,
                    response_serializer=message__pb2.Empty.SerializeToString,
            ),
            'EvaluateLoss': grpc.unary_unary_rpc_method_handler(
                    servicer.EvaluateLoss,
                    request_deserializer=message__pb2.LossConfig.FromString,
                    response_serializer=message__pb2.Loss.SerializeToString,
            ),
            'Ping': grpc.unary_unary_rpc_method_handler(
                    servicer.Ping,
                    request_deserializer=message__pb2.Empty.FromString,
                    response_serializer=message__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'distributedtraining.DistributedWorker', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DistributedWorker(object):
    """A distributed worker that evaluates configurations
    """

    @staticmethod
    def EvaluateConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/distributedtraining.DistributedWorker/EvaluateConfig',
            message__pb2.Config.SerializeToString,
            message__pb2.Performanace.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CollectQueries(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/distributedtraining.DistributedWorker/CollectQueries',
            message__pb2.Config.SerializeToString,
            message__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EvaluateLoss(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/distributedtraining.DistributedWorker/EvaluateLoss',
            message__pb2.LossConfig.SerializeToString,
            message__pb2.Loss.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/distributedtraining.DistributedWorker/Ping',
            message__pb2.Empty.SerializeToString,
            message__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
